{
  "author": {
    "name": "Brian Kirchoff",
    "email": "briankircho@gmail.com"
  },
  "name": "mongoose-tree",
  "description": "Materialized path hierarchy for mongoose",
  "homepage": "https://github.com/briankircho/mongoose-tree",
  "repository": {
    "type": "git",
    "url": "git://github.com/briankircho/mongoose-tree.git"
  },
  "main": "index.js",
  "version": "0.2.2",
  "engine": "node >= 0.4.0",
  "dependencies": {
    "mongoose": "~3.5.0"
  },
  "devDependencies": {
    "async": "~0.1.22",
    "should": "~1.0.0",
    "underscore": "~1.3.3"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "mongoose",
    "materialized",
    "path",
    "tree",
    "mongodb"
  ],
  "license": "BSD",
  "readme": "## mongoose-tree\n\nImplements the materialized path strategy for storing a hierarchy of documents with mongoose\n\n# Usage\n\nInstall via NPM\n\n    $ npm install mongoose-tree\n\nThen you can use the plugin on your schemas\n\n```javascript\nvar tree = require('mongoose-tree');\n\nvar UserSchema = new Schema({\n  name : String\n});\nUserSchema.plugin(tree);\nvar User = mongoose.model('User', UserSchema);\n\nvar adam = new User({ name : 'Adam' });\nvar bob = new User({ name : 'Bob' });\nvar carol = new User({ name : 'Carol' });\n\n// Set the parent relationships\nbob.parent = adam;\ncarol.parent = bob;\n\nadam.save(function() {\n  bob.save(function() {\n    carol.save();\n  });\n});\n```\n\nAt this point in mongoDB you will have documents similar to\n\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"name\" : \"Adam\",\n      \"path\" : \"50136e40c78c4b9403000001\"\n    }\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000002\"),\n      \"name\" : \"Bob\",\n      \"parent\" : ObjectId(\"50136e40c78c4b9403000001\"),\n      \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002\"\n    }\n    {\n      \"_id\" : ObjectId(\"50136e40c78c4b9403000003\"),\n      \"name\" : \"Carol\",\n      \"parent\" : ObjectId(\"50136e40c78c4b9403000002\"),\n      \"path\" : \"50136e40c78c4b9403000001#50136e40c78c4b9403000002#50136e40c78c4b9403000003\"\n    }\n\nThe path is used for recursive methods and is kept up to date by the plugin if the parent is changed\n\n## Options\n\n```javascript\nModel.plugin(tree, {\n  pathSeparator : '#' // Default path separator\n})\n```\n\n# API\n\n### getChildren\n\nSignature:\n\n    getChildren([recursive], cb);\n\nif recursive is supplied and true subchildren are returned\n\nBased on the above hierarchy:\n\n```javascript\nadam.getChildren(function(err, users) {\n  // users is an array of with the bob document\n});\n\nadam.getChildren(true, function(err, users) {\n  // users is an array with both bob and carol documents\n});\n```\n\n### getAncestors\n\nSignature:\n\n    getAncestors(cb);\n\nBased on the above hierarchy:\n\n```javascript\ncarol.getAncestors(function(err, users) {\n  // users is an array of adam and bob\n})\n```\n\n### level\n\nEqual to the level of the hierarchy\n\n```javascript\ncarol.level; // equals 3\n```\n\n# Tests\n\nTo run the tests install mocha\n\n    npm install mocha -g\n\nand then run\n\n    mocha\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/briankircho/mongoose-tree/issues"
  },
  "_id": "mongoose-tree@0.2.2",
  "_from": "mongoose-tree@*"
}
